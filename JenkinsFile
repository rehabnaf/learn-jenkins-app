pipeline {
    agent any

    stages {
        stage('Build') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
               sh '''
                    ls -la
                    node --version
                    npm --version
                    npm ci  # install dependencies
                    npm run build # compiles the source code 
                    ls -la
               '''
            }
        }
        stage("Tests"){
            parallel{
                stage("Unit tests"){ // unit test
                    agent{
                        docker{
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps{
                            sh ''' 
                                echo "Test stage"
                                test -f build/index.html
                                npm test
                            '''
                    }
                    post{
                        always{
                            junit 'jest-results/junit.xml' // jenkins reads the unit test report generated by junit
                        }
                    }
                }
                stage("E2E"){ // end to end test (testing the running application)
                    agent{
                        docker{
                            image 'mcr.microsoft.com/playwright:v1.39.0-jammy' //playwright docker image
                            reuseNode true
                        }
                    }
                    steps{
                        sh ''' 
                            #installs server software dependency
                            npm install serve 
                            # & makes the server run in the background without affecting other commands
                            node_modules/.bin/serve -s build & 
                            #sleeps for 10 seconds before running tests so the server has enough time to start
                            sleep 10
                            #Performs tests on the running application and generate a html report
                            npx playwright test --reporter=html 
                        '''
                    }
                    post{
                        always{
                            // publishing the html report so we don't have to go into the workspace to see the html report for every build
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }        
            }
        }
        
    }
    post {
        success {
            script {
                echo "Sending 'success' status to GitHub"
                def commitSha = "${env.GIT_COMMIT}"
                echo "The commit SHA is: ${commitSha}"
                def response = httpRequest(
                    url: "https://api.github.com/repos/rehabnaf/learn-jenkins-app/statuses/${commitSha}",
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: """{
                        "state": "success",
                        "description": "Build passed",
                        "context": "ci/jenkins-pipeline",
                        "target_url": "${env.BUILD_URL}"
                    }""",
                    authentication: 'github-token'
                )
                echo "GitHub Response: ${response.status}"
            }
        }

        failure {
            script {
                echo "Sending 'failure' status to GitHub"
                def commitSha = "${env.GIT_COMMIT}"
                echo "The commit SHA is: ${commitSha}"
                def response = httpRequest(
                    url: "https://api.github.com/repos/your-repo/project/statuses/${commitSha}",
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: """{
                        "state": "failure",
                        "description": "Build failed",
                        "context": "ci/jenkins-pipeline",
                        "target_url": "${env.BUILD_URL}"
                    }""",
                    authentication: 'github-token'
                )
                echo "GitHub Response: ${response.status}"
            }
        }

        always {
            echo "Pipeline finished. Commit SHA: ${commitSha}"
        }
    }
   
}
